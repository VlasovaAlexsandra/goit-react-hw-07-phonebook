{"version":3,"sources":["redux/Contacts/contacts-actions.js","redux/Contacts/contacts-operations.js","redux/Contacts/contacts-selectors.js","components/Form/ContactForm/ContactForm.js","components/Form/Filter/Filter.js","components/Form/ContactList/ContactList.js","App.js","redux/Contacts/contacts-reducer.js","redux/Contacts/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","id","delete","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","nameInputId","shortid","generate","numberInputId","findInput","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","map","alert","onSubmit","reset","this","fetchContacts","className","htmlFor","type","pattern","title","required","onChange","Component","connect","contactsSelectors","contactsOperations","onChangeFilter","contactsActions","target","onDeleteContact","onClick","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8d00d8.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest')\r\nexport const fetchContactSuccess = createAction('contacts / fetchContactSuccess')\r\nexport const fetchContactError = createAction('contacts/fetchContactError')\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest')\r\nexport const addContactSuccess = createAction('contacts / addContactSuccess')\r\nexport const addContactError = createAction('contacts/addContactError')\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest')\r\nexport const deleteContactSuccess = createAction('contacts / deleteContactSuccess')\r\nexport const deleteContactError = createAction('contacts/deleteContactError')\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter')\r\n","import axios from 'axios'\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000/'\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactRequest())\r\n\r\n    axios\r\n        .get('./contacts')\r\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error)))\r\n\r\n}\r\n\r\nconst addContacts = (name, number) => dispatch => {\r\n    const contact = { name, number }\r\n\r\n    dispatch(addContactRequest())\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)))\r\n}\r\n\r\nconst deleteContacts = id => dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error)))\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    fetchContacts,\r\n    addContacts,\r\n    deleteContacts,\r\n\r\n}","import { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase()\r\n        return contacts.filter((contacts) =>\r\n            contacts.name.toLowerCase().includes(normalizedFilter)\r\n        );\r\n    })\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    getFilter,\r\n    getAllContacts,\r\n    getVisibleContacts,\r\n}","import { Component } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport contactsOperations from '../../../redux/Contacts/contacts-operations'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n    findInput = shortid.generate();\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContacts()\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.props.contacts.map(({ name }) => name).includes(this.state.name)) {\r\n            alert(`${this.state.name} is already in contacts`)\r\n            return\r\n        }\r\n        this.props.onSubmit(\r\n            this.state.name,\r\n            this.state.number,\r\n        )\r\n        this.reset()\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form className=\"TaskEditor\" onSubmit={this.handleSubmit}>\r\n                    <label className=\"TaskEditor_label\" htmlFor={this.nameInputId}>Name</label>\r\n                    <br />\r\n                    <input\r\n                        className=\"TaskEditor_input\"\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        onChange={this.handleChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    <br />\r\n                    <label className=\"TaskEditor_label\" htmlFor={this.numberInputId}>Number</label>\r\n                    <br />\r\n                    <input\r\n                        className=\"TaskEditor_input\"\r\n                        type=\"text\"\r\n                        value={this.state.number}\r\n                        name=\"number\"\r\n                        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={this.handleChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                    <br />\r\n                    <button className=\"TaskEditor_button\" type=\"submit\">Add contact</button>\r\n                </form>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getAllContacts(state)\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n    onSubmit: (name, number) => dispatch(contactsOperations.addContacts(name, number))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)","import PropTypes from \"prop-types\";\r\nimport { connect } from 'react-redux'\r\nimport * as contactsActions from '../../../redux/Contacts/contacts-actions'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\nimport './Filter.css'\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n    return (\r\n        <div>\r\n            <p className=\"Filter_text\">Find contacts by name</p>\r\n            <br />\r\n            <input\r\n                className=\"Filter_input\"\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={onChangeFilter}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChangeFilter: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import PropTypes from \"prop-types\";\r\nimport { connect } from 'react-redux'\r\nimport contactsOperations from '../../../redux/Contacts/contacts-operations'\r\nimport contactsSelectors from '../../../redux/Contacts/contacts-selectors'\r\nimport './ContactList.css'\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ul className=\"TaskList\"> {contacts.map(({ id, name, number }) => (\r\n        <li className=\"TaskList_item\" key={id}>\r\n            <p className=\"TaskList_text\">{name}: {number}</p>\r\n            <button\r\n                className=\"TaskList_button\"\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n            >Delete</button>\r\n        </li>\r\n    ))}\r\n    </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })),\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: (id) => dispatch(contactsOperations.deleteContacts(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React, { Component } from 'react';\r\nimport ContactForm from './components/Form/ContactForm/ContactForm';\r\nimport Filter from './components/Form/Filter/Filter';\r\nimport ContactList from './components/Form/ContactList/ContactList';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"Title\">Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className=\"Title\">Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from \"redux\"\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    changeFilter,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(contact => contact.id !== payload)\r\n\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload\r\n})\r\n\r\nexport default combineReducers({ items, filter, loading })","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport contactsReducer from './contacts-reducer'\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH,\r\n                REHYDRATE,\r\n                PAUSE,\r\n                PERSIST,\r\n                PURGE,\r\n                REGISTER,]\r\n        }\r\n    }),\r\n    logger]\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/Contacts/store'\nimport 'modern-normalize/modern-normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}